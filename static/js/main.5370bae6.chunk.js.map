{"version":3,"sources":["EnterName.js","StartGame.js","Game.js","SuccessMessage.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["EnterName","handleName","class","className","placeholder","type","id","onClick","e","preventDefault","name","document","getElementById","value","StartGame","startGame","adapter","LocalStorage","db","low","Game","props","handleGuessInput","event","setState","guess","target","guessHasError","validateGuess","read","state","number","wonGame","formattedGuess","toString","split","formattedNumber","order","match","forEach","num","index","includes","primaryKey","get","length","push","write","trials","gameStarted","this","max","min","onChange","scope","map","trial","Component","SuccessMessage","role","App","set","randomNumber","generateRandomNumber","digits","numbers","i","randomDigit","_","sample","remove","d","parseInt","join","Boolean","window","location","hostname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5370bae6.chunk.js","sourcesContent":["import React from 'react'\n\nconst EnterName = ({handleName}) => {\n    return (\n        <div class=\"d-flex vh-100\">\n            <div class=\"d-flex w-100 justify-content-center align-self-center\">\n                <form>\n                    <div className=\"form-group\">\n                        <input className=\"form-control\" placeholder=\"Enter your name\" type=\"text\" id=\"name\"/>\n                    </div>\n                    <div className=\"form-group text-center\">\n                        <button className=\"btn btn-info\" onClick={e => {\n                            e.preventDefault();\n                            const name = document.getElementById('name').value;\n                            handleName(name);\n                        }}>Next</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default EnterName\n","import React from 'react'\n\nconst StartGame = ({ name, startGame }) => {\n    return (\n        <div className=\"d-flex vh-100\">\n            <div className=\"d-flex w-100 justify-content-center align-self-center\">\n                <form>\n                    <div className=\"form-group\">\n                        <h3><b>Hi</b> <span className=\"text-primary\">{name}</span>!</h3>\n                    </div>\n                    <div className=\"form-group text-center\">\n                        <button className=\"btn btn-info\" onClick={startGame}>Start Game</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default StartGame\n","import React, { Component } from 'react'\nimport low from 'lowdb'\nimport LocalStorage from 'lowdb/adapters/LocalStorage'\n\nconst adapter = new LocalStorage('db')\nconst db = low(adapter)\n\n\nclass Game extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { name: \"\", number: null, gameStarted: false, guess: null, guessHasError: false, trials: [] };\n    }\n\n\n    componentDidMount() {\n        db.read();\n        const name = db.get('name').value();\n        const number = db.get('number').value();\n        const gameStarted = db.get('gameStarted').value();\n        const trials = db.get('trials').value();\n        this.setState({ name, number, gameStarted, trials });\n    }\n\n    handleGuessInput = (event) => {\n        this.setState({ guess: event.target.value, guessHasError: false });\n    }\n\n    validateGuess = () => {\n        db.read();\n        const { number, guess } = this.state;\n        const { wonGame } = this.props;\n        if (guess < 1000 || guess > 9999) return this.setState({ guessHasError: true });\n\n        let formattedGuess = guess.toString().split('');\n        let formattedNumber = number.toString().split('');\n\n        let order = 0;\n        let match = 0;\n        formattedGuess.forEach((num, index) => {\n            if (num === formattedNumber[index]) order += 1;\n            if (formattedNumber.includes(num)) match += 1\n        })\n        const primaryKey = db.get('trials').value().length + 1;\n        db.get('trials').push({ id: primaryKey, guess, match, order }).write();\n\n        db.read();\n        let trials = db.get('trials').value();\n        this.setState({ trials });\n        if (match === 4 && order === 4) wonGame();\n\n    }\n\n\n\n    render() {\n        const { guessHasError, trials } = this.state;\n\n        return (\n            <div className=\"container\">\n                <div className=\"row mt-4\">\n                    <div className=\"col-sm-12 col-md-4 col-lg-4 offset-md-4 offset-lg-4\">\n                        <div className=\"form-group\">\n                            <input className=\"form-control\" placeholder=\"Enter your guess\"\n                                type=\"number\" id=\"guess\" max=\"9999\" min=\"1000\" onChange={this.handleGuessInput} />\n                            {guessHasError && <span className=\"text-danger\">Guess must be between 1000 and 9999.</span>}\n                        </div>\n                        <div className=\"form-group\">\n                            <button className=\"btn btn-info\" onClick={this.validateGuess}>Guess</button>\n                        </div>\n                        <hr />\n                        <table className=\"table table-dark\">\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\">Guess</th>\n                                    <th scope=\"col\">Match</th>\n                                    <th scope=\"col\">Order</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {trials.map(trial => {\n                                    return (\n                                        <tr key={trial.id}>\n                                            <td>{trial.guess}</td>\n                                            <td>{trial.match}</td>\n                                            <td>{trial.order}</td>\n                                        </tr>\n                                    )\n                                })}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Game;\n","import React, { Component } from 'react'\nimport low from 'lowdb'\nimport LocalStorage from 'lowdb/adapters/LocalStorage'\n\nconst adapter = new LocalStorage('db')\nconst db = low(adapter)\n\nclass SuccessMessage extends Component {\n    render() {\n        db.read();\n        let trials = db.get('trials').value();\n        const { startGame } = this.props;\n        return (\n            <div className=\"d-flex vh-100\">\n                <div className=\"d-flex w-100 justify-content-center align-self-center\">\n                    <div className=\"container\">\n                        <div className=\"row mt-4\">\n                            <div className=\"col-sm-12 col-md-6 col-lg-6 offset-md-3 offset-lg-3\">\n                                <div class=\"alert alert-success\" role=\"alert\">\n                                    <h4 class=\"alert-heading\">Well done!</h4>\n                                    <ul>\n                                        <li>Success sits on a mountain of mistakes.</li>\n                                        <li>Failure is an opportunity to learn again.</li>\n                                    </ul>\n                                    <hr />\n                                    <div className=\"text-center\">\n                                        <p><b>You won in {trials.length} trials.</b></p>\n                                        <button className=\"btn btn-primary\" onClick={e => startGame()}>Play Again</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SuccessMessage\n","import React, { Component } from 'react'\nimport low from 'lowdb'\nimport LocalStorage from 'lowdb/adapters/LocalStorage'\nimport EnterName from './EnterName'\nimport StartGame from './StartGame'\nimport Game from './Game'\nimport _ from 'lodash';\nimport SuccessMessage from './SuccessMessage'\n\n\nconst adapter = new LocalStorage('db')\nconst db = low(adapter)\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { name: \"\", number: null, gameStarted: false, wonGame: false};\n  }\n\n\n  componentDidMount() {\n    const name = db.get('name').value();\n    const number = db.get('number').value();\n    const wonGame = db.get('wonGame').value();\n    const gameStarted = db.get('gameStarted').value();\n    this.setState({ name, number, wonGame,gameStarted });\n  }\n\n  handleName = (name)=> {\n    db.set('name', name).write()\n    this.setState({ name });\n  }\n\n  startGame = () =>{\n    db.read();\n    const randomNumber = this.generateRandomNumber();\n    db.set('trials', []).write();\n    db.set('gameStarted', true).write();\n    db.set('wonGame', false).write();\n    db.set('number', randomNumber).write();\n    this.setState({ gameStarted: true, wonGame: false });\n  }\n\n\n\n  generateRandomNumber = () => {\n    let digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]; \n    let numbers = [];\n    for (let i = 0; i < 4; i++) {\n      let randomDigit = _.sample(digits);\n      numbers.push(randomDigit);\n      _.remove(digits, (d) => {return d === randomDigit });\n    }\n    return parseInt(numbers.join('')); \n  }\n\n  wonGame = () => {\n    db.read();\n    db.set('wonGame', true).write()\n    this.setState({ wonGame: true });\n  }\n\n\n  \n  render() {\n    const { name, gameStarted, wonGame } = this.state;\n    if (!name) return <EnterName handleName={this.handleName}/>\n    if (wonGame) return <SuccessMessage startGame={this.startGame}/>\n    if (!gameStarted) return <StartGame name={name} startGame={this.startGame} />\n    return <Game wonGame={this.wonGame}/>;\n\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}